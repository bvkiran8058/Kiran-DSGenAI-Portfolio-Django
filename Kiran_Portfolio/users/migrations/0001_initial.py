# Generated by Django 5.2.7 on 2025-11-01 07:47

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import users.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(error_messages={'unique': 'A user with that email already exists.'}, help_text='Enter your valid email', max_length=254, unique=True, verbose_name='email')),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('visitor', 'Visitor'), ('recruiter', 'Recruiter'), ('contributor', 'Contributor')], help_text='Select one: Admin, Visitor, Recruiter, or Contributor', max_length=15)),
                ('email_verified', models.BooleanField(default=False)),
                ('profile_completed', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ProfessionalInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('designation', models.CharField(help_text='Current title (e.g. Data Scientist)', max_length=100)),
                ('company', models.CharField(blank=True, help_text='Current company name', max_length=150)),
                ('skills', models.JSONField(default=dict, help_text="List of skills (e.g. 'languages': ['Python', 'c'], 'frameworks':['django', 'langchain'])")),
                ('years_of_experience', models.PositiveIntegerField(default=0)),
                ('education', models.JSONField(default=list, help_text="List of dicts: [{'degree': 'B.Tech', 'university': 'IIT', 'year': 2020}]")),
                ('certifications', models.JSONField(blank=True, default=list, help_text='List of certifications with issuer/date', null=True)),
                ('achievements', models.TextField(blank=True, null=True)),
                ('projects_count', models.PositiveIntegerField(default=0)),
                ('resume', models.FileField(blank=True, help_text='Upload resume (PDF)', null=True, upload_to='resumes/')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='professional_info', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('headline', models.CharField(help_text='Short tagline (e.g. “Data Scientist | GenAI Developer”)', max_length=100)),
                ('bio', models.TextField(help_text='Short professional summary')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_photos/')),
                ('location', models.CharField(help_text='City, Country', max_length=100)),
                ('date_of_birth', models.DateField(blank=True, null=True, validators=[users.models.validate_age])),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SocialLinks',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('github_url', models.URLField(blank=True, null=True)),
                ('linkedin_url', models.URLField(blank=True, null=True)),
                ('kaggle_url', models.URLField(blank=True, null=True)),
                ('portfolio_website', models.URLField(blank=True, null=True)),
                ('medium_url', models.URLField(blank=True, null=True)),
                ('twitter_url', models.URLField(blank=True, null=True)),
                ('youtube_url', models.URLField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='social_links', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
